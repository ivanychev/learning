!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
CC	Makefile	/^CC 		=  gcc #clang-3.5$/;"	m
CFLAGS	Makefile	/^CFLAGS 		= -g $(STANDARD) $(GCOV) $(WARNINGS) -MD -pthread$/;"	m
GCOV	Makefile	/^GCOV 	 	= -fprofile-arcs -ftest-coverage -pg$/;"	m
STANDARD	Makefile	/^STANDARD 	= -std=c11$/;"	m
TARGET	Makefile	/^TARGET 		= determ.out$/;"	m
VALGRIND_KEYS	Makefile	/^VALGRIND_KEYS 	= $/;"	m
WARNINGS	Makefile	/^WARNINGS 	= -Wall -Werror$/;"	m
f	generate_matrix.py	/^f = open(sys.argv[2], "w")$/;"	v
rand_num	generate_matrix.py	/^		rand_num = random.randint(-2, 2)$/;"	v
size	generate_matrix.py	/^	size = int(size)$/;"	v
size	generate_matrix.py	/^	size = sys.argv[1]$/;"	v
wolfram	generate_matrix.py	/^wolfram = open("wolfram.txt", "w")$/;"	v
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
CALL	iv_standard.h	122;"	d
CALLN	iv_standard.h	130;"	d
CHECK	iv_standard.h	131;"	d
CHECKN	iv_standard.h	132;"	d
DOUT	iv_standard.h	167;"	d
ERROR_MESSAGES	iv_standard.h	/^enum ERROR_MESSAGES$/;"	g
F_CHECK	iv_standard.h	91;"	d
F_CHECK_EXIT_CODE	iv_standard.h	82;"	d
F_LOCATION	iv_standard.h	25;"	d
F_LOCATION	iv_standard.h	87;"	d
F_LOCATION	iv_standard.h	88;"	d
F_WARN	iv_standard.h	136;"	d
F_WARN	iv_standard.h	152;"	d
I32OUT	iv_standard.h	175;"	d
I64OUT	iv_standard.h	176;"	d
IOUT	iv_standard.h	164;"	d
IVALLOCFAIL	iv_standard.h	/^	IVALLOCFAIL$/;"	e	enum:ERROR_MESSAGES
IVFOPENFAIL	iv_standard.h	/^	IVFOPENFAIL,$/;"	e	enum:ERROR_MESSAGES
IVINVALARGNUM	iv_standard.h	/^	IVINVALARGNUM,$/;"	e	enum:ERROR_MESSAGES
IVINVALPID	iv_standard.h	/^	IVINVALPID,$/;"	e	enum:ERROR_MESSAGES
IVNEGSIZE	iv_standard.h	/^	IVNEGSIZE,$/;"	e	enum:ERROR_MESSAGES
IVPTRNULL	iv_standard.h	/^	IVPTRNULL,$/;"	e	enum:ERROR_MESSAGES
LOCATION	iv_standard.h	34;"	d
LOC_OUT	iv_standard.h	44;"	d
LOC_OUT	iv_standard.h	56;"	d
LOC_OUT1	iv_standard.h	45;"	d
LOC_OUT1	iv_standard.h	57;"	d
LOC_OUT2	iv_standard.h	46;"	d
LOC_OUT2	iv_standard.h	58;"	d
LOUT	iv_standard.h	165;"	d
LUOUT	iv_standard.h	166;"	d
OUT	iv_standard.h	39;"	d
OUT	iv_standard.h	51;"	d
OUT1	iv_standard.h	40;"	d
OUT1	iv_standard.h	52;"	d
OUT2	iv_standard.h	41;"	d
OUT2	iv_standard.h	53;"	d
OUT3	iv_standard.h	42;"	d
OUT3	iv_standard.h	54;"	d
OUT4	iv_standard.h	43;"	d
OUT4	iv_standard.h	55;"	d
POUT	iv_standard.h	169;"	d
SOUT	iv_standard.h	170;"	d
TEMPLATE_OUT	iv_standard.h	158;"	d
U32OUT	iv_standard.h	173;"	d
U64OUT	iv_standard.h	174;"	d
UOUT	iv_standard.h	168;"	d
WARN	iv_standard.h	155;"	d
__IV_STANDARD	iv_standard.h	2;"	d
iv_msgs	iv_standard.h	/^char const* iv_msgs[] = {$/;"	v
DEBUG	ivmatrix.c	1;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	145;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	146;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	155;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	156;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	167;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	168;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	178;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	179;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	201;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	202;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	214;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	215;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	236;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	237;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	272;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	273;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	287;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	288;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	362;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	363;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	375;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	376;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	397;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	47;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	48;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	59;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	60;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	6;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	77;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	78;"	d	file:
F_CHECK_EXIT_CODE	ivmatrix.c	7;"	d	file:
TEMP_FILE	ivmatrix.c	8;"	d	file:
add_string	ivmatrix.c	/^inline void add_string(matrix* this, uint32_t added, uint32_t to, double factor)$/;"	f
annihilate_below	ivmatrix.c	/^inline void annihilate_below(matrix* this, uint32_t i)$/;"	f
gauss	ivmatrix.c	/^int gauss(matrix* this, double* result)$/;"	f
get_long	ivmatrix.c	/^int get_long(long* save, const char* str)$/;"	f
get_matrix	ivmatrix.c	/^int get_matrix(FILE* fd, matrix* this) $/;"	f
get_matrix_determinant	ivmatrix.c	/^int get_matrix_determinant(const matrix* this, long nthreads, double* ret)$/;"	f
get_minor	ivmatrix.c	/^matrix* get_minor(const matrix* this, uint32_t string, uint32_t column)$/;"	f
get_threads	ivmatrix.c	/^pthread_t* get_threads(const matrix* this, long amount, double* results, struct thread_meta** info_save)$/;"	f
main	ivmatrix.c	/^int main(int argc, char const *argv[]) $/;"	f
matrix_copy	ivmatrix.c	/^matrix matrix_copy(const matrix* copied)$/;"	f
matrix_kill	ivmatrix.c	/^void matrix_kill(matrix* this)$/;"	f
print_diff	ivmatrix.c	/^void print_diff(struct timeval begin, struct timeval end)$/;"	f
print_matrix	ivmatrix.c	/^void   print_matrix(const matrix* this)$/;"	f
proceed_arguments	ivmatrix.c	/^int proceed_arguments(int argc, char const* argv[], FILE** fd, long* nthreads)$/;"	f
search_below_nzero_swap	ivmatrix.c	/^void search_below_nzero_swap(matrix* this, uint32_t i)$/;"	f
swap_strings	ivmatrix.c	/^inline void swap_strings(matrix* this, uint32_t first, uint32_t second)$/;"	f
thread_routine	ivmatrix.c	/^void* thread_routine(void* info_ptr)$/;"	f
ELEM	ivmatrix.h	142;"	d
ELEM_TYPE	ivmatrix.h	139;"	d
IS_ZERO	ivmatrix.h	145;"	d
_XOPEN_SOURCE	ivmatrix.h	1;"	d
data	ivmatrix.h	/^	void* data;$/;"	m	struct:matrix_s
matrix	ivmatrix.h	/^typedef struct matrix_s matrix;$/;"	t	typeref:struct:matrix_s
matrix_s	ivmatrix.h	/^struct matrix_s {$/;"	s
minor_index	ivmatrix.h	/^	uint32_t 	minor_index;$/;"	m	struct:thread_meta
ptr	ivmatrix.h	/^	const matrix*  	ptr;$/;"	m	struct:thread_meta
semid	ivmatrix.h	/^	int      	semid;$/;"	m	struct:thread_meta
size	ivmatrix.h	/^	uint32_t size;$/;"	m	struct:matrix_s
thread_meta	ivmatrix.h	/^struct thread_meta {$/;"	s
threads_num	ivmatrix.h	/^	long 	 	threads_num;$/;"	m	struct:thread_meta
to_save	ivmatrix.h	/^	double*  	to_save;$/;"	m	struct:thread_meta
BILLION	try.c	11;"	d	file:
main	try.c	/^int main( int argc, char **argv )$/;"	f
