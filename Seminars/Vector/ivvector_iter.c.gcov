        -:    0:Source:ivvector_iter.c
        -:    0:Graph:ivvector.gcno
        -:    0:Data:ivvector.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "ivvector.h"
        -:    2:#include "ivvector_internal.h"
        -:    3:
        -:    4:// Iterators
        -:    5:
        -:    6:/*
        -:    7:	PTR_ERR MODIFY AHEAD
        -:    8: */
      100:    9:vector_iter* vector_iter_get(vector* this)
        -:   10:{
      100:   11:	if (this == NULL)
       30:   12:		return NULL;
       70:   13:	vector_iter* new = iv_calloc(1, sizeof(vector_iter));
       70:   14:	if (new == NULL)
       29:   15:		return NULL;
       41:   16:	new->ptr = this;
        -:   17:
       41:   18:	return new;
        -:   19:}
        -:   20:
        -:   21:
      100:   22:int vector_iter_del(vector_iter* this)
        -:   23:{
      100:   24:	if (this == NULL)
       59:   25:		return -1;
       41:   26:	this -> ptr   =        NULL;
       41:   27:	this -> index =        IV_POISON;
       41:   28:	iv_free(this);
       41:   29:	this = NULL;
        -:   30:
       41:   31:	return 0;
        -:   32:}
        -:   33:
        -:   34://==========================================================================================
        -:   35://==========================================================================================
        -:   36:
      500:   37:int vector_iter_next(vector_iter* this, void* dest)
        -:   38:{
      500:   39:	ITER_CHECK(this);
        -:   40:
      110:   41:	if (this->ptr->size == 0)
       72:   42:		return 0;
        -:   43:
       38:   44:	if (dest != NULL)
       38:   45:		__copy_elem(this->ptr, this->index, dest);
        -:   46:
       38:   47:	if (this->index < this->ptr->size - 1)
        -:   48:	{
       26:   49:		this->index += 1;
       26:   50:		return 1;
        -:   51:	}
       12:   52:	return 0;
        -:   53:}
        -:   54:
        -:   55:
      400:   56:int vector_iter_prev(vector_iter* this, void* dest)
        -:   57:{
      400:   58:	ITER_CHECK(this);
       88:   59:	if (this->ptr->size == 0)
       50:   60:		return 0;
       38:   61:	if (dest != NULL)
       19:   62:		__copy_elem(this->ptr, this->index, dest);
        -:   63:
       38:   64:	if (this->index > 0)
        -:   65:	{
       26:   66:		this->index -= 1;
       26:   67:		return 1;
        -:   68:	}
       12:   69:	return 0;
        -:   70:}
        -:   71://==========================================================================================
        -:   72://==========================================================================================
        -:   73:
      200:   74:int vector_iter_getelem (const vector_iter* this, void* dest)
        -:   75:{
      200:   76:	ITER_CHECK(this);
       41:   77:	if (dest == NULL || this->ptr->size == 0)
        3:   78:		return -1;
       38:   79:	__copy_elem(this->ptr, this->index, dest);
       38:   80:	return 0;
        -:   81:}
        -:   82:
        -:   83://==========================================================================================
        -:   84://==========================================================================================
        -:   85:
      100:   86:int vector_iter_setelem(vector_iter* this, const void* src)
        -:   87:{
      100:   88:	ITER_CHECK(this);
       22:   89:	if (src == NULL || this->ptr->size == 0)
        3:   90:		return -1;
       19:   91:	__set_elem(this->ptr, this->index, src);
       19:   92:	return 0;
        -:   93:}
        -:   94:
        -:   95://==========================================================================================
        -:   96://==========================================================================================
        -:   97:
      100:   98:int vector_iter_begin(vector_iter* this)
        -:   99:{
      100:  100:	if (this == NULL)
       59:  101:		return -1;
       41:  102:	VECTOR_CHECK(this->ptr);
       22:  103:	this->index = 0;
       22:  104:	return 0;
        -:  105:}
        -:  106:
        -:  107:
      100:  108:int vector_iter_end(vector_iter* this)
        -:  109:{
      100:  110:	if (this == NULL)
       59:  111:		return -1;
       41:  112:	VECTOR_CHECK(this->ptr);
       22:  113:	this->index = this->ptr->size - 1;
       22:  114:	return 0;
        -:  115:}
        -:  116:
        -:  117://==========================================================================================
        -:  118://==========================================================================================
        -:  119:
      100:  120:int vector_iter_isbegin(const vector_iter* this)
        -:  121:{
      100:  122:	ITER_CHECK(this);
       19:  123:	if (this -> index == 0 && this->ptr->size != 0)
        3:  124:		return 1;
       16:  125:	return 0;
        -:  126:}
        -:  127:
      100:  128:int vector_iter_isend(const vector_iter* this)
        -:  129:{
      100:  130:	ITER_CHECK(this);
       19:  131:	if (this -> index == this -> ptr -> size - (int64)1)
       19:  132:		return 1;
    #####:  133:	return 0;
        -:  134:}
        -:  135:
        -:  136://==========================================================================================
        -:  137://==========================================================================================
        -:  138:
      100:  139:void* vector_iter_do(vector_iter* iter, void* args, void* (*proceed)(void* obj,void* argv))
        -:  140:{
        -:  141://	fprintf(stderr, "Hello!");
      100:  142:	if (!__vector_iter_check(iter) || !__vector_check(iter->ptr) || !proceed)
       81:  143:		return NULL;
        -:  144://	__vector_dump(iter->ptr);
       19:  145:	return proceed(__elem_ptr(iter->ptr, iter->index), args);
        -:  146:}
        -:  147:
