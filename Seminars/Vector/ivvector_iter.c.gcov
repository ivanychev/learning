        -:    0:Source:ivvector_iter.c
        -:    0:Graph:ivvector.gcno
        -:    0:Data:ivvector.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "ivvector.h"
        -:    2:#include "ivvector_internal.h"
        -:    3:
        -:    4:// Iterators
        -:    5:
        -:    6:/*
        -:    7:	PTR_ERR MODIFY AHEAD
        -:    8: */
      100:    9:vector_iter* vector_iter_get(vector* this)
        -:   10:{
      100:   11:	if (this == NULL)
       10:   12:		return NULL;
       90:   13:	vector_iter* new = iv_calloc(1, sizeof(vector_iter));
       90:   14:	if (new == NULL)
        8:   15:		return NULL;
       82:   16:	new->ptr = this;
        -:   17:
       82:   18:	return new;
        -:   19:}
        -:   20:
        -:   21:/**
        -:   22: * Deletes iterator
        -:   23: * @param  this pointer to iterator
        -:   24: * @return      0 if success, -1 if "this" is NULL
        -:   25: */
      100:   26:int vector_iter_del(vector_iter* this)
        -:   27:{
      100:   28:	if (this == NULL)
       18:   29:		return -1;
       82:   30:	this -> ptr   =        NULL;
       82:   31:	this -> index =        IV_POISON;
       82:   32:	iv_free(this);
       82:   33:	return 0;
        -:   34:}
        -:   35:
        -:   36:/**
        -:   37: * Moves iterator to next element
        -:   38: * @param  this current iterator
        -:   39: * @param  dest if not NULL copies current object before moving iterator
        -:   40: * @return      1 if moved, 0 if not, -1 if iterator is invalid
        -:   41: */
      500:   42:int vector_iter_next(vector_iter* this, void* dest)
        -:   43:{
      500:   44:	ITER_CHECK(this);
      410:   45:	if (this->ptr->size == 0)
      246:   46:		return 0;
        -:   47:
      164:   48:	if (dest != NULL)
      164:   49:		__copy_elem(this->ptr, this->index, dest);
        -:   50:
      164:   51:	if (this->index < this->ptr->size - 1)
        -:   52:	{
      164:   53:		this->index += 1;
      164:   54:		return 1;
        -:   55:	}
    #####:   56:	return 0;
        -:   57:}
        -:   58:
        -:   59:/**
        -:   60: * Moves iterator to previous element
        -:   61: * @param  this current iterator
        -:   62: * @param  dest if not NULL copies current object before moving iterator
        -:   63: * @return 1 if moved, 0 if not, -1 if iterator is invalid
        -:   64: */
      400:   65:int vector_iter_prev(vector_iter* this, void* dest)
        -:   66:{
      400:   67:	ITER_CHECK(this);
      328:   68:	if (this->ptr->size == 0)
      164:   69:		return 0;
      164:   70:	if (dest != NULL)
       82:   71:		__copy_elem(this->ptr, this->index, dest);
        -:   72:
      164:   73:	if (this->index > 0)
        -:   74:	{
      164:   75:		this->index -= 1;
      164:   76:		return 1;
        -:   77:	}
    #####:   78:	return 0;
        -:   79:}
        -:   80:
        -:   81:/**
        -:   82: * Copies object, pointed by iterator
        -:   83: * @param  this current iterator
        -:   84: * @param  dest destination
        -:   85: * @return      0 if success, -1 if failure
        -:   86: */
      200:   87:int vector_iter_getelem (const vector_iter* this, void* dest)
        -:   88:{
      200:   89:	ITER_CHECK(this);
      164:   90:	if (dest == NULL || this->ptr->size == 0)
    #####:   91:		return -1;
      164:   92:	__copy_elem(this->ptr, this->index, dest);
      164:   93:	return 0;
        -:   94:}
        -:   95:
        -:   96:/**
        -:   97: * Replaces object, pointed by iterator, with argumented
        -:   98: * @param  this current iterator
        -:   99: * @param  src  
        -:  100: * @return      0 if success, -1 if failure
        -:  101: */
      100:  102:int vector_iter_setelem(vector_iter* this, const void* src)
        -:  103:{
      100:  104:	ITER_CHECK(this);
       82:  105:	if (src == NULL || this->ptr->size == 0)
    #####:  106:		return -1;
       82:  107:	__set_elem(this->ptr, this->index, src);
       82:  108:	return 0;
        -:  109:}
        -:  110:
        -:  111:/**
        -:  112: * Sets iterator to begin of vector
        -:  113: * @param  this current iterator
        -:  114: * @return      0 if success, -1 if "this" is NULL or vector is invalid
        -:  115: */
      100:  116:int vector_iter_begin(vector_iter* this)
        -:  117:{
      100:  118:	if (this == NULL)
       18:  119:		return -1;
       82:  120:	VECTOR_CHECK(this->ptr);
       82:  121:	this->index = 0;
       82:  122:	return 0;
        -:  123:}
        -:  124:
        -:  125:/**
        -:  126: * Sets iterator to end of vector
        -:  127: * @param  this current iterator
        -:  128: * @return      0 if success, -1 if "this" is NULL or vector is invalid
        -:  129: */
      100:  130:int vector_iter_end(vector_iter* this)
        -:  131:{
      100:  132:	if (this == NULL)
       18:  133:		return -1;
       82:  134:	VECTOR_CHECK(this->ptr);
       82:  135:	this->index = this->ptr->size - 1;
       82:  136:	return 0;
        -:  137:}
        -:  138:
        -:  139:/**
        -:  140: * Is the pointed object first??
        -:  141: * @param  this current iterator
        -:  142: * @return      1 if true, 0 if false, -1 if iterator is invalid
        -:  143: */
      100:  144:int vector_iter_isbegin(const vector_iter* this)
        -:  145:{
      100:  146:	ITER_CHECK(this);
       82:  147:	if (this -> index == 0 && this->ptr->size != 0)
    #####:  148:		return 1;
       82:  149:	return 0;
        -:  150:}
        -:  151:
        -:  152:/**
        -:  153: * Is the pointed object last??
        -:  154: * @param  this current iterator
        -:  155: * @return      1 if true, 0 if false, -1 if iterator is invalid
        -:  156: */
      100:  157:int vector_iter_isend(const vector_iter* this)
        -:  158:{
      100:  159:	ITER_CHECK(this);
       82:  160:	if (this -> index == this -> ptr -> size - (int64)1)
       82:  161:		return 1;
    #####:  162:	return 0;
        -:  163:}
        -:  164:
        -:  165:
      100:  166:void* vector_iter_do(vector_iter* iter, void* args, void* (*proceed)(void* obj,void* argv))
        -:  167:{
      100:  168:	if (!__vector_iter_check(iter))
       18:  169:		return NULL;
       82:  170:	return proceed(__elem_ptr(iter->ptr, iter->index), args);
        -:  171:}
