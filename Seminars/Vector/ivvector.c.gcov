        -:    0:Source:ivvector.c
        -:    0:Graph:ivvector.gcno
        -:    0:Data:ivvector.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "ivvector.h"
        -:    2:#include "ivvector_internal.h"
        -:    3:
        -:    4:#include "ivvector_utils.c"
        -:    5:#include "ivvector_iter.c"
        -:    6:#include "unistd.h"
        -:    7:
        -:    8:
        -:    9:const uint32 MAXESIZE_RATIO = 100;
        -:   10:const uint32 MINALLOC_ELEMS = 5; 
        -:   11:
        -:   12:
        -:   13://==========================================================================================
        -:   14:/**
        -:   15: * Deletes all objects and releases memory
        -:   16: * @param this current vector
        -:   17: */
        -:   18:
      270:   19:static void __vector_eliminate_all_and_free(vector* this)
        -:   20:{
      270:   21:	assert(this);
      270:   22:	void*  cursor = NULL;
      270:   23:	uint32 index  = 0;
      270:   24:	fprintf(stderr, "Hi\n");
      270:   25:	__vector_dump(this);
      270:   26:	if (this->destr != NULL && this-> begin != NULL)
     2021:   27:		FOR_EACH(cursor, this, index)
     1759:   28:			this->destr(cursor);
      270:   29:	fprintf(stderr, "Hi\n");
      270:   30:	if (this->begin != NULL)
      262:   31:		iv_free(this->begin);
      270:   32:}
        -:   33:
        -:   34:/**
        -:   35: * Optimizes allocated memory. If allocated more than size * 2, the
        -:   36: * ammount of memory would be reduced
        -:   37: * @param  this analysed vector
        -:   38: * @return 0 if OK, -1 if failed to realloc memory
        -:   39: */
      262:   40:static int __optimize_alloc(vector* this)
        -:   41:{
      262:   42:	assert(this);
      262:   43:	uint32 alloc = this->alloc;
      262:   44:	uint32 size  = this->size;
      325:   45:	if (!
      262:   46:		((size  <= alloc / 2) &&
       63:   47:		(alloc / 2>= MINALLOC_ELEMS)) 
        -:   48:	    )
      200:   49:		return 0;
       62:   50:	void* new_begin = iv_realloc(this->begin, BYTES_IN_ELEMS(this, alloc / 2));
       62:   51:	this->begin = new_begin;
       62:   52:	this->alloc = alloc / 2;
        -:   53:
       62:   54:	if (new_begin == NULL)
        8:   55:		return -1;
       54:   56:	return 0;
        -:   57:}
        -:   58:
        -:   59:/**
        -:   60: * Allocates more memory to vector
        -:   61: * @param  	this current vector
        -:   62: * @return      1 if success, 0 if maximum size reached, -1 if realloc failed
        -:   63: */
      570:   64:static int __alloc_more(vector* this)
        -:   65:{
      570:   66:	assert(this);
      570:   67:	uint32      alloc   = this->alloc;
      570:   68:	uint32      maxsize = this->maxsize;
      570:   69:	if (alloc == maxsize)
    #####:   70:		return 0;
      570:   71:	uint64 new_alloc = (alloc != 0)? alloc * 2: 
        -:   72:					 MINALLOC_ELEMS;
      570:   73:	if (new_alloc > maxsize)
    #####:   74:		new_alloc = maxsize;
      570:   75:	void* new_begin = iv_realloc(this->begin, BYTES_IN_ELEMS(this, new_alloc));
      570:   76:	if (new_begin == NULL)
       59:   77:		return -1;
        -:   78:
      511:   79:	this->begin = new_begin;
      511:   80:	this->alloc = new_alloc;
      511:   81:	return 1;
        -:   82:}
        -:   83:
        -:   84:
        -:   85:/**
        -:   86: * Allocates memory and creates vector object
        -:   87: *
        -:   88: * @size 	Size of contained element
        -:   89: * @destr 	Function pointer to object destructor, possible to be NULL
        -:   90: * @maxsize 	Maximal size of vector
        -:   91: */
        -:   92:
      100:   93:vector* __vector_init(uint32 size, void (*destr)(void* obj))
        -:   94:{
      100:   95:	vector* new = iv_calloc(1, sizeof(vector));
      100:   96:	if (new == NULL)
       10:   97:		return NULL;
        -:   98:
      180:   99:	       vector new_vector = {	
        -:  100: 		.alloc = 0, 		
        -:  101: 		.size = 0, 		
        -:  102: 		.maxsize = VEC_MAXSIZE, 	
        -:  103: 		.esize = size, 	
       90:  104: 		.emaxsize = VEC_MAXSIZE/MAXESIZE_RATIO, 	
        -:  105: 		.begin = NULL,
        -:  106: 		.destr = destr
        -:  107: 	};
       90:  108: 	*new = new_vector;
       90:  109: 	return new;
        -:  110:}
        -:  111:
        -:  112:/**
        -:  113: * Deletes current vector
        -:  114: * @param  this Deleting vector
        -:  115: * @return      -1 if pointer is NULL, 0 if success
        -:  116: */
      100:  117:int vector_delete(vector* this)
        -:  118:{
      100:  119:	if (this == NULL)
       10:  120:		return -1;
       90:  121:	__vector_eliminate_all_and_free(this);
        -:  122:
       90:  123:	this->alloc 	= IV_POISON;
       90:  124:	this->size  	= IV_POISON;
       90:  125:	this->maxsize 	= IV_POISON;
       90:  126:	this->esize   	= IV_POISON;
       90:  127:	this->emaxsize 	= IV_POISON;
       90:  128:	this->begin	= NULL;
       90:  129:	this->destr	= NULL;
        -:  130:
       90:  131:	iv_free(this);
       90:  132:	return 0;
        -:  133:}
        -:  134:
        -:  135:/**
        -:  136: * Deletes all objects and releases memory
        -:  137: * @param  this current vector
        -:  138: * @return      -1 if vector is invalid, 0 if success
        -:  139: */
      200:  140:int vector_erase(vector* this)
        -:  141:{
      200:  142:	VECTOR_CHECK(this);
      180:  143:	__vector_eliminate_all_and_free(this);
        -:  144:
      180:  145:	this->alloc 	= 0;
      180:  146:	this->size  	= 0;
      180:  147:	this->begin	= NULL;
      180:  148:	return 0;
        -:  149:}
        -:  150:
        -:  151:/**
        -:  152: * Removes index'th element of vector
        -:  153: * @param  this  current vector
        -:  154: * @param  index index of removing object
        -:  155: * @return       -1 if not in bounds, 0 if OK
        -:  156: */
      272:  157:int vector_remove(vector* this, uint32 index)
        -:  158:{
      272:  159:	if (!(this != NULL && IN_BOUNDS(index, this)))
       10:  160:		return -1;
      262:  161:	void* ptr = __elem_ptr(this, index);
      262:  162:	if(this->destr != NULL)
      262:  163:		this->destr(ptr);
        -:  164:
      786:  165:	memmove(ptr, 
      262:  166:		NEXT_PTR(ptr, this), 
      524:  167:		BYTES_IN_ELEMS(this, this->size - index - 1));
      262:  168:	this->size -= 1;
      262:  169:	return __optimize_alloc(this);
        -:  170:	
        -:  171:}
        -:  172:
        -:  173:/**
        -:  174: * Inserts current element to be index'th element in vector
        -:  175: * @param  this  current vector
        -:  176: * @param  elem  element to insert
        -:  177: * @param  index future index
        -:  178: * @return       -1  if not in bounds or reallocation failed
        -:  179: *                0  if maximum size reached
        -:  180: *                1  if OK
        -:  181: */
     2280:  182:int vector_insert(vector* this, const void* elem, uint32 index)
        -:  183:{
        -:  184:	
     2280:  185:	if (!(this != NULL && (IN_BOUNDS(index, this) || index == this->size)))
      120:  186:		return -1;
     2160:  187:	int cond = 0;
        -:  188:
     2160:  189:	if (this->size == this->alloc)
        -:  190:	{
      570:  191:		cond = __alloc_more(this);
      570:  192:		if (cond != 1)
       59:  193:			return cond;
        -:  194:	}
     2101:  195:	void* current = __elem_ptr(this, index);
        -:  196:
     2101:  197:	memmove(NEXT_PTR(current, this), current, BYTES_IN_ELEMS(this, this->size - index));	
        -:  198:	
     2101:  199:	__set_elem(this, index, elem);
        -:  200:
     2101:  201:	this->size += 1;
     2101:  202:	return 1;
        -:  203:}
        -:  204:
        -:  205:/**
        -:  206: * Sorts current vector
        -:  207: * @param this	current vector
        -:  208: * @param comp	comparison function
        -:  209: * @return	-1 if vector is invalid, 0 if OK
        -:  210: */
        -:  211:
      100:  212:int vector_sort(vector* this, int (*comp)(const void*, const void*))
        -:  213:{
      100:  214:	VECTOR_CHECK(this);
       90:  215:	__vector_dump(this);
       90:  216:	qsort(this->begin, this->size, this->esize, comp);
       90:  217:	return 0;
        -:  218:}
        -:  219:
        -:  220:/**
        -:  221: * Copies vector element to the pointer
        -:  222: * @param  this         current vector
        -:  223: * @param  index        index of copying element
        -:  224: * @param  where_to_get pointer to save
        -:  225: * @return              -1 if not in bounds, 0 if OK
        -:  226: */
      380:  227:int vector_get(const vector* this, uint32 index, void* where_to_get)
        -:  228:{
      380:  229:	VECTOR_CHECK(this);
      344:  230:	if (!this || !IN_BOUNDS(index, this) || !where_to_get)
       82:  231:		return -1;
        -:  232:	
      262:  233:	__copy_elem(this, index, where_to_get);
      262:  234:	return 0;
        -:  235:
        -:  236:}
        -:  237:
      100:  238:int vector_set(vector* this, uint32 index, void* what_to_send)
        -:  239:{
      100:  240:	VECTOR_CHECK(this);
       90:  241:	if (!this || !IN_BOUNDS(index, this) || !what_to_send)
    #####:  242:		return -1;
       90:  243:	__set_elem(this, index, what_to_send);
       90:  244:	return 0;
        -:  245:}
        -:  246:
      200:  247:int vector_empty(const vector* this)
        -:  248:{
      200:  249:	if (this == NULL)
       20:  250:		return -1;
      180:  251:	return this->size == 0;
        -:  252:}
        -:  253:
      100:  254:uint32 vector_size(const vector* this)
        -:  255:{
      100:  256:	if (this == NULL)
       10:  257:		return -1;
       90:  258:	return this->size;
        -:  259:}
        -:  260:
      100:  261:uint32 vector_esize(const vector* this)
        -:  262:{
      100:  263:	if (this == NULL)
       10:  264:		return -1;
       90:  265:	return this->esize;
        -:  266:}
        -:  267:
      100:  268:uint32 vector_maxsize(const vector* this)
        -:  269:{
      100:  270:	if (this == NULL)
       10:  271:		return -1;
       90:  272:	return this->maxsize;
        -:  273:}
        -:  274:
      100:  275:uint32 vector_alloc(const vector* this)
        -:  276:{
      100:  277:	if (this == NULL)
       10:  278:		return -1;
       90:  279:	return this->alloc;
        -:  280:}
        -:  281:
        -:  282:/**
        -:  283: * Changes allocated memory capacity to its size
        -:  284: * @param  this current vector
        -:  285: * @return      -1 if vector is invalid or failed to reallocate memory
        -:  286: *               0 if OK
        -:  287: */
      100:  288:int vector_fit(vector* this)
        -:  289:{
      100:  290:	VECTOR_CHECK(this);
       90:  291:	void* new_begin = iv_realloc(this->begin, BYTES_IN_ELEMS(this, this->size));
       90:  292:	if (new_begin == NULL)
       11:  293:		return -1;
       79:  294:	this->begin = new_begin;
       79:  295:	this->alloc = this->size;
       79:  296:	return 1;
        -:  297:}
        -:  298:
        -:  299:
     1600:  300:inline int __vector_pushback (vector* this, const void* obj)
        -:  301:{
     1600:  302:	if (this == NULL)
      160:  303:		return -1;
     1440:  304:	return vector_insert(this, obj, this->size);
        -:  305:}
        -:  306:
      600:  307:inline int __vector_pushfront(vector* this, const void* obj)
        -:  308:{
      600:  309:	if (this == NULL)
       60:  310:		return -1;
      540:  311:	return vector_insert(this, obj, 0);
        -:  312:}
        -:  313:
      200:  314:int __vector_popback  (vector* this, void* dest)
        -:  315:{
      200:  316:	if (this == NULL || dest == NULL)
       20:  317:		return -1;
      180:  318:	printf("Hello\n");
      180:  319:	int cond = vector_get(this, this->size - 1, dest);
      180:  320:	if (cond == -1)
        8:  321:		return cond;
      172:  322:	cond =  vector_remove(this, this->size - 1);
      172:  323:	return cond;
        -:  324:}
    #####:  325:int __vector_popfront (vector* this, void* dest)
        -:  326:{
    #####:  327:	if (this == NULL || dest == NULL)
    #####:  328:		return -1;
    #####:  329:	int cond = vector_get(this, 0, dest);
    #####:  330:	if (cond == -1)
    #####:  331:		return cond;
    #####:  332:	cond =  vector_remove(this, 0);
    #####:  333:	return cond;	
        -:  334:}
