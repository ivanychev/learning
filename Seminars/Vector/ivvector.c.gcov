        -:    0:Source:ivvector.c
        -:    0:Graph:ivvector.gcno
        -:    0:Data:ivvector.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "ivvector.h"
        -:    2:#include "ivvector_internal.h"
        -:    3:
        -:    4:#include "ivvector_utils.c"
        -:    5:#include "ivvector_iter.c"
        -:    6:#include "unistd.h"
        -:    7:
        -:    8:
        -:    9:const uint32 MAXESIZE_RATIO = 100;
        -:   10:const uint32 MINALLOC_ELEMS = 5; 
        -:   11:
        -:   12://==========================================================================================
        -:   13:
        -:   14:/**
        -:   15: * Deletes all objects and releases memory
        -:   16: * @param this current vector
        -:   17: */
        -:   18:
      151:   19:static void __vector_eliminate_all_and_free(vector* this)
        -:   20:{
      151:   21:	assert(this);
      151:   22:	void*  cursor = NULL;
      151:   23:	uint32 index  = 0;
        -:   24://	fprintf(stderr, "Hi\n");
        -:   25://	__vector_dump(this);
      151:   26:	if (this->destr != NULL && this-> begin != NULL)
      742:   27:		FOR_EACH(cursor, this, index)
      638:   28:			this->destr(cursor);
        -:   29://	fprintf(stderr, "Hi\n");
      151:   30:	if (this->begin != NULL){
      104:   31:		iv_free(this->begin);
      104:   32:		this->begin = NULL;
        -:   33:	}
      151:   34:}
        -:   35:
        -:   36:/**
        -:   37: * Optimizes allocated memory. If allocated more than size * 2, the
        -:   38: * ammount of memory would be reduced
        -:   39: * @param  this analysed vector
        -:   40: * @return 0 if OK, -1 if failed to realloc memory
        -:   41: */
      125:   42:static int __optimize_alloc(vector* this)
        -:   43:{
      125:   44:	assert(this);
      125:   45:	uint32 alloc = this->alloc;
      125:   46:	uint32 size  = this->size;
      146:   47:	if (!
      125:   48:		((size  <= alloc / 2) &&
       21:   49:		(alloc / 2>= MINALLOC_ELEMS)) 
        -:   50:	    )
      124:   51:		return 0;
        1:   52:	this->begin  = iv_realloc(this->begin, BYTES_IN_ELEMS(this, alloc / 2));
        1:   53:	this->alloc = alloc / 2;
        -:   54:
        1:   55:	if (this->begin == NULL){
    #####:   56:		this->alloc = 0;
    #####:   57:		return -1;
        -:   58:	}
        1:   59:	return 0;
        -:   60:}
        -:   61:
        -:   62:/**
        -:   63: * Allocates more memory to vector
        -:   64: * @param  	this current vector
        -:   65: * @return      1 if success, 0 if maximum size reached, -1 if realloc failed
        -:   66: */
      356:   67:static int __alloc_more(vector* this)
        -:   68:{
      356:   69:	assert(this);
      356:   70:	uint32      alloc   = this->alloc;
      356:   71:	uint32      maxsize = this->maxsize;
      356:   72:	if (alloc == maxsize)
    #####:   73:		return 0;
      356:   74:	uint64 new_alloc = (alloc != 0)? alloc * 2: 
        -:   75:					 MINALLOC_ELEMS;
      356:   76:	if (new_alloc > maxsize)
    #####:   77:		new_alloc = maxsize;
      356:   78:	this->begin = iv_realloc(this->begin, BYTES_IN_ELEMS(this, new_alloc));
      356:   79:	if (this->begin == NULL){
      123:   80:		this->alloc = 0;
      123:   81:		return -1;
        -:   82:	}
        -:   83:
      233:   84:	this->alloc = new_alloc;
      233:   85:	return 1;
        -:   86:}
        -:   87:
        -:   88:
      100:   89:vector* __vector_init(uint32 size, void (*destr)(void* obj))
        -:   90:{
      100:   91:	vector* new = iv_calloc(1, sizeof(vector));
      100:   92:	if (new == NULL)
       30:   93:		return NULL;
        -:   94:
      140:   95:	       vector new_vector = {	
        -:   96: 		.alloc = 0, 		
        -:   97: 		.size = 0, 		
        -:   98: 		.maxsize = VEC_MAXSIZE, 	
        -:   99: 		.esize = size, 	
       70:  100: 		.emaxsize = VEC_MAXSIZE/MAXESIZE_RATIO, 	
        -:  101: 		.begin = NULL,
        -:  102: 		.destr = destr
        -:  103: 	};
       70:  104: 	*new = new_vector;
       70:  105: 	return new;
        -:  106:}
        -:  107:
        -:  108:
        -:  109:
        -:  110://==========================================================================================
        -:  111://==========================================================================================
        -:  112:
      100:  113:int vector_delete(vector* this)
        -:  114:{
      100:  115:	if (this == NULL)
       30:  116:		return -1;
       70:  117:	__vector_eliminate_all_and_free(this);
        -:  118:
       70:  119:	this->alloc 	= IV_POISON;
       70:  120:	this->size  	= IV_POISON;
       70:  121:	this->maxsize 	= IV_POISON;
       70:  122:	this->esize   	= IV_POISON;
       70:  123:	this->emaxsize 	= IV_POISON;
       70:  124:	this->begin	= NULL;
       70:  125:	this->destr	= NULL;
        -:  126:
       70:  127:	iv_free(this);
       70:  128:	this = NULL;
       70:  129:	return 0;
        -:  130:}
        -:  131:
        -:  132:
        -:  133://==========================================================================================
        -:  134://==========================================================================================
        -:  135:
      200:  136:int vector_erase(vector* this)
        -:  137:{
      200:  138:	VECTOR_CHECK(this);
       81:  139:	__vector_eliminate_all_and_free(this);
        -:  140:
       81:  141:	this->alloc 	= 0;
       81:  142:	this->size  	= 0;
       81:  143:	this->begin	= NULL;
       81:  144:	return 0;
        -:  145:}
        -:  146:
        -:  147:
        -:  148://==========================================================================================
        -:  149://==========================================================================================
        -:  150:
      275:  151:int vector_remove(vector* this, uint32 index)
        -:  152:{
      275:  153:	VECTOR_CHECK(this);
      148:  154:	if (!(IN_BOUNDS(index, this)))
       23:  155:		return -1;
      125:  156:	void* ptr = __elem_ptr(this, index);
      125:  157:	if(this->destr != NULL)
      125:  158:		this->destr(ptr);
        -:  159:
      375:  160:	memmove(ptr, 
      125:  161:		NEXT_PTR(ptr, this), 
      250:  162:		BYTES_IN_ELEMS(this, this->size - index - 1));
      125:  163:	this->size -= 1;
      125:  164:	return __optimize_alloc(this);
        -:  165:	
        -:  166:}
        -:  167:
        -:  168:
        -:  169://==========================================================================================
        -:  170://==========================================================================================
        -:  171:
     1940:  172:int vector_insert(vector* this, const void* elem, uint32 index)
        -:  173:{
        -:  174:	
     1940:  175:	VECTOR_CHECK(this);
     1153:  176:	if (!((IN_BOUNDS(index, this) || index == this->size)))
       23:  177:		return -1;
     1130:  178:	int cond = 0;
        -:  179:
     1130:  180:	if (this->size == this->alloc)
        -:  181:	{
      356:  182:		cond = __alloc_more(this);
      356:  183:		if (cond != 1)
      123:  184:			return cond;
        -:  185:	}
     1007:  186:	void* current = __elem_ptr(this, index);
        -:  187://	__vector_dump(this);
        -:  188://	fprintf(stderr, "THIS[%p], NEXT_PTR[%p], CURRENT[%p], BYTES[%lu]\n", 
        -:  189://		this, NEXT_PTR(current, this), current, BYTES_IN_ELEMS(this, this->size - index));
     1007:  190:	memmove(NEXT_PTR(current, this), current, BYTES_IN_ELEMS(this, this->size - index));	
        -:  191:	
     1007:  192:	__set_elem(this, index, elem);
        -:  193:
     1007:  194:	this->size += 1;
     1007:  195:	return 1;
        -:  196:}
        -:  197:
        -:  198:
        -:  199://==========================================================================================
        -:  200://==========================================================================================
        -:  201:
      100:  202:int vector_sort(vector* this, int (*comp)(const void*, const void*))
        -:  203:{
      100:  204:	VECTOR_CHECK(this);
        -:  205://	__vector_dump(this);
       50:  206:	qsort(this->begin, this->size, this->esize, comp);
       50:  207:	return 0;
        -:  208:}
        -:  209:
        -:  210:
        -:  211://==========================================================================================
        -:  212://==========================================================================================
        -:  213:
      410:  214:int vector_get(const vector* this, uint32 index, void* where_to_get)
        -:  215:{
      410:  216:	VECTOR_CHECK(this);
      150:  217:	if (!this || !IN_BOUNDS(index, this) || !where_to_get)
       25:  218:		return -1;
        -:  219:	
      125:  220:	__copy_elem(this, index, where_to_get);
      125:  221:	return 0;
        -:  222:
        -:  223:}
        -:  224:
        -:  225:
        -:  226://==========================================================================================
        -:  227://==========================================================================================
        -:  228:
      200:  229:int vector_set(vector* this, uint32 index, void* what_to_send)
        -:  230:{
      200:  231:	VECTOR_CHECK(this);
       73:  232:	if (!this || !IN_BOUNDS(index, this) || !what_to_send)
       23:  233:		return -1;
       50:  234:	__set_elem(this, index, what_to_send);
       50:  235:	return 0;
        -:  236:}
        -:  237:
        -:  238://==========================================================================================
        -:  239://==========================================================================================
        -:  240:
      200:  241:int vector_empty(const vector* this)
        -:  242:{
      200:  243:	if (this == NULL)
       60:  244:		return -1;
      140:  245:	return this->size == 0;
        -:  246:}
        -:  247:
        -:  248://==========================================================================================
        -:  249://==========================================================================================
        -:  250:
      100:  251:uint32 vector_size(const vector* this)
        -:  252:{
      100:  253:	if (this == NULL)
       30:  254:		return -1;
       70:  255:	return this->size;
        -:  256:}
        -:  257:
      100:  258:uint32 vector_esize(const vector* this)
        -:  259:{
      100:  260:	if (this == NULL)
       30:  261:		return -1;
       70:  262:	return this->esize;
        -:  263:}
        -:  264:
      100:  265:uint32 vector_maxsize(const vector* this)
        -:  266:{
      100:  267:	if (this == NULL)
       30:  268:		return -1;
       70:  269:	return this->maxsize;
        -:  270:}
        -:  271:
      100:  272:uint32 vector_alloc(const vector* this)
        -:  273:{
      100:  274:	if (this == NULL)
       30:  275:		return -1;
       70:  276:	return this->alloc;
        -:  277:}
        -:  278:
        -:  279://==========================================================================================
        -:  280://==========================================================================================
        -:  281:
      100:  282:int vector_fit(vector* this)
        -:  283:{
      100:  284:	VECTOR_CHECK(this);
       37:  285:	    this->begin = iv_realloc(this->begin, BYTES_IN_ELEMS(this, this->size));
       37:  286:	if (this->begin == NULL){
        6:  287:		this->alloc = 0;
        6:  288:		return -1;
        -:  289:	}
       31:  290:	this->alloc = this->size;
       31:  291:	return 1;
        -:  292:}
        -:  293:
        -:  294://==========================================================================================
        -:  295://==========================================================================================
        -:  296:
     1600:  297:inline int __vector_pushback (vector* this, const void* obj)
        -:  298:{
     1600:  299:	if (this == NULL)
      480:  300:		return -1;
     1120:  301:	return vector_insert(this, obj, this->size);
        -:  302:}
        -:  303:
      600:  304:inline int __vector_pushfront(vector* this, const void* obj)
        -:  305:{
      600:  306:	if (this == NULL)
      180:  307:		return -1;
      420:  308:	return vector_insert(this, obj, 0);
        -:  309:}
        -:  310:
      200:  311:int __vector_popback  (vector* this, void* dest)
        -:  312:{
      200:  313:	if (this == NULL || dest == NULL)
       60:  314:		return -1;
        -:  315://	printf("Hello\n");
      140:  316:	int cond = vector_get(this, this->size - 1, dest);
      140:  317:	if (cond == -1)
       94:  318:		return cond;
       46:  319:	cond =  vector_remove(this, this->size - 1);
       46:  320:	return cond;
        -:  321:}
      100:  322:int __vector_popfront (vector* this, void* dest)
        -:  323:{
      100:  324:	if (this == NULL || dest == NULL)
       30:  325:		return -1;
       70:  326:	int cond = vector_get(this, 0, dest);
       70:  327:	if (cond == -1)
       41:  328:		return cond;
       29:  329:	cond =  vector_remove(this, 0);
       29:  330:	return cond;	
        -:  331:}
