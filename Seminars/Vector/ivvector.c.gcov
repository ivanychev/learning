        -:    0:Source:ivvector.c
        -:    0:Graph:ivvector.gcno
        -:    0:Data:ivvector.gcda
        -:    0:Runs:5
        -:    0:Programs:3
        -:    1:#include "ivvector.h"
        -:    2:#include "ivvector_internal.h"
        -:    3:
        -:    4:#include "ivvector_utils.c"
        -:    5:#include "ivvector_iter.c"
        -:    6:#include "unistd.h"
        -:    7:
        -:    8:
        -:    9:const uint32 MAXESIZE_RATIO = 100;
        -:   10:const uint32 MINALLOC_ELEMS = 5; 
        -:   11:
        -:   12:
        -:   13://==========================================================================================
        -:   14:/**
        -:   15: * Deletes all objects and releases memory
        -:   16: * @param this current vector
        -:   17: */
        -:   18:
      455:   19:static void __vector_eliminate_all_and_free(vector* this)
        -:   20:{
      455:   21:	assert(this);
      455:   22:	void*  cursor = NULL;
      455:   23:	uint32 index  = 0;
        -:   24://	fprintf(stderr, "Hi\n");
        -:   25://	__vector_dump(this);
      455:   26:	if (this->destr != NULL && this-> begin != NULL)
     2226:   27:		FOR_EACH(cursor, this, index)
     1914:   28:			this->destr(cursor);
        -:   29://	fprintf(stderr, "Hi\n");
      455:   30:	if (this->begin != NULL){
      312:   31:		iv_free(this->begin);
      312:   32:		this->begin = NULL;
        -:   33:	}
      455:   34:}
        -:   35:
        -:   36:/**
        -:   37: * Optimizes allocated memory. If allocated more than size * 2, the
        -:   38: * ammount of memory would be reduced
        -:   39: * @param  this analysed vector
        -:   40: * @return 0 if OK, -1 if failed to realloc memory
        -:   41: */
      375:   42:static int __optimize_alloc(vector* this)
        -:   43:{
      375:   44:	assert(this);
      375:   45:	uint32 alloc = this->alloc;
      375:   46:	uint32 size  = this->size;
      438:   47:	if (!
      375:   48:		((size  <= alloc / 2) &&
       63:   49:		(alloc / 2>= MINALLOC_ELEMS)) 
        -:   50:	    )
      372:   51:		return 0;
        3:   52:	this->begin  = iv_realloc(this->begin, BYTES_IN_ELEMS(this, alloc / 2));
        3:   53:	this->alloc = alloc / 2;
        -:   54:
        3:   55:	if (this->begin == NULL){
    #####:   56:		this->alloc = 0;
    #####:   57:		return -1;
        -:   58:	}
        3:   59:	return 0;
        -:   60:}
        -:   61:
        -:   62:/**
        -:   63: * Allocates more memory to vector
        -:   64: * @param  	this current vector
        -:   65: * @return      1 if success, 0 if maximum size reached, -1 if realloc failed
        -:   66: */
     1072:   67:static int __alloc_more(vector* this)
        -:   68:{
     1072:   69:	assert(this);
     1072:   70:	uint32      alloc   = this->alloc;
     1072:   71:	uint32      maxsize = this->maxsize;
     1072:   72:	if (alloc == maxsize)
    #####:   73:		return 0;
     1072:   74:	uint64 new_alloc = (alloc != 0)? alloc * 2: 
        -:   75:					 MINALLOC_ELEMS;
     1072:   76:	if (new_alloc > maxsize)
    #####:   77:		new_alloc = maxsize;
     1072:   78:	this->begin = iv_realloc(this->begin, BYTES_IN_ELEMS(this, new_alloc));
     1072:   79:	if (this->begin == NULL){
      371:   80:		this->alloc = 0;
      371:   81:		return -1;
        -:   82:	}
        -:   83:
      701:   84:	this->alloc = new_alloc;
      701:   85:	return 1;
        -:   86:}
        -:   87:
        -:   88:
        -:   89:/**
        -:   90: * Allocates memory and creates vector object
        -:   91: *
        -:   92: * @size 	Size of contained element
        -:   93: * @destr 	Function pointer to object destructor, possible to be NULL
        -:   94: * @maxsize 	Maximal size of vector
        -:   95: */
        -:   96:
      302:   97:vector* __vector_init(uint32 size, void (*destr)(void* obj))
        -:   98:{
      302:   99:	vector* new = iv_calloc(1, sizeof(vector));
      302:  100:	if (new == NULL)
       90:  101:		return NULL;
        -:  102:
      424:  103:	       vector new_vector = {	
        -:  104: 		.alloc = 0, 		
        -:  105: 		.size = 0, 		
        -:  106: 		.maxsize = VEC_MAXSIZE, 	
        -:  107: 		.esize = size, 	
      212:  108: 		.emaxsize = VEC_MAXSIZE/MAXESIZE_RATIO, 	
        -:  109: 		.begin = NULL,
        -:  110: 		.destr = destr
        -:  111: 	};
      212:  112: 	*new = new_vector;
      212:  113: 	return new;
        -:  114:}
        -:  115:
        -:  116:/**
        -:  117: * Deletes current vector
        -:  118: * @param  this Deleting vector
        -:  119: * @return      -1 if pointer is NULL, 0 if success
        -:  120: */
      302:  121:int vector_delete(vector* this)
        -:  122:{
      302:  123:	if (this == NULL)
       90:  124:		return -1;
      212:  125:	__vector_eliminate_all_and_free(this);
        -:  126:
      212:  127:	this->alloc 	= IV_POISON;
      212:  128:	this->size  	= IV_POISON;
      212:  129:	this->maxsize 	= IV_POISON;
      212:  130:	this->esize   	= IV_POISON;
      212:  131:	this->emaxsize 	= IV_POISON;
      212:  132:	this->begin	= NULL;
      212:  133:	this->destr	= NULL;
        -:  134:
      212:  135:	iv_free(this);
      212:  136:	this = NULL;
      212:  137:	return 0;
        -:  138:}
        -:  139:
        -:  140:/**
        -:  141: * Deletes all objects and releases memory
        -:  142: * @param  this current vector
        -:  143: * @return      -1 if vector is invalid, 0 if success
        -:  144: */
      604:  145:int vector_erase(vector* this)
        -:  146:{
      604:  147:	VECTOR_CHECK(this);
      243:  148:	__vector_eliminate_all_and_free(this);
        -:  149:
      243:  150:	this->alloc 	= 0;
      243:  151:	this->size  	= 0;
      243:  152:	this->begin	= NULL;
      243:  153:	return 0;
        -:  154:}
        -:  155:
        -:  156:/**
        -:  157: * Removes index'th element of vector
        -:  158: * @param  this  current vector
        -:  159: * @param  index index of removing object
        -:  160: * @return       -1 if not in bounds, 0 if OK
        -:  161: */
      829:  162:int vector_remove(vector* this, uint32 index)
        -:  163:{
      829:  164:	VECTOR_CHECK(this);
      444:  165:	if (!(IN_BOUNDS(index, this)))
       69:  166:		return -1;
      375:  167:	void* ptr = __elem_ptr(this, index);
      375:  168:	if(this->destr != NULL)
      375:  169:		this->destr(ptr);
        -:  170:
     1125:  171:	memmove(ptr, 
      375:  172:		NEXT_PTR(ptr, this), 
      750:  173:		BYTES_IN_ELEMS(this, this->size - index - 1));
      375:  174:	this->size -= 1;
      375:  175:	return __optimize_alloc(this);
        -:  176:	
        -:  177:}
        -:  178:
        -:  179:/**
        -:  180: * Inserts current element to be index'th element in vector
        -:  181: * @param  this  current vector
        -:  182: * @param  elem  element to insert
        -:  183: * @param  index future index
        -:  184: * @return       -1  if not in bounds or reallocation failed
        -:  185: *                0  if maximum size reached
        -:  186: *                1  if OK
        -:  187: */
     5872:  188:int vector_insert(vector* this, const void* elem, uint32 index)
        -:  189:{
        -:  190:	
     5872:  191:	VECTOR_CHECK(this);
     3471:  192:	if (!((IN_BOUNDS(index, this) || index == this->size)))
       69:  193:		return -1;
     3402:  194:	int cond = 0;
        -:  195:
     3402:  196:	if (this->size == this->alloc)
        -:  197:	{
     1072:  198:		cond = __alloc_more(this);
     1072:  199:		if (cond != 1)
      371:  200:			return cond;
        -:  201:	}
     3031:  202:	void* current = __elem_ptr(this, index);
        -:  203://	__vector_dump(this);
        -:  204://	fprintf(stderr, "THIS[%p], NEXT_PTR[%p], CURRENT[%p], BYTES[%lu]\n", 
        -:  205://		this, NEXT_PTR(current, this), current, BYTES_IN_ELEMS(this, this->size - index));
     3031:  206:	memmove(NEXT_PTR(current, this), current, BYTES_IN_ELEMS(this, this->size - index));	
        -:  207:	
     3031:  208:	__set_elem(this, index, elem);
        -:  209:
     3031:  210:	this->size += 1;
     3031:  211:	return 1;
        -:  212:}
        -:  213:
        -:  214:/**
        -:  215: * Sorts current vector
        -:  216: * @param this	current vector
        -:  217: * @param comp	comparison function
        -:  218: * @return	-1 if vector is invalid, 0 if OK
        -:  219: */
        -:  220:
      302:  221:int vector_sort(vector* this, int (*comp)(const void*, const void*))
        -:  222:{
      302:  223:	VECTOR_CHECK(this);
        -:  224://	__vector_dump(this);
      150:  225:	qsort(this->begin, this->size, this->esize, comp);
      150:  226:	return 0;
        -:  227:}
        -:  228:
        -:  229:/**
        -:  230: * Copies vector element to the pointer
        -:  231: * @param  this         current vector
        -:  232: * @param  index        index of copying element
        -:  233: * @param  where_to_get pointer to save
        -:  234: * @return              -1 if not in bounds, 0 if OK
        -:  235: */
     1240:  236:int vector_get(const vector* this, uint32 index, void* where_to_get)
        -:  237:{
     1240:  238:	VECTOR_CHECK(this);
      450:  239:	if (!this || !IN_BOUNDS(index, this) || !where_to_get)
       75:  240:		return -1;
        -:  241:	
      375:  242:	__copy_elem(this, index, where_to_get);
      375:  243:	return 0;
        -:  244:
        -:  245:}
        -:  246:
      604:  247:int vector_set(vector* this, uint32 index, void* what_to_send)
        -:  248:{
      604:  249:	VECTOR_CHECK(this);
      219:  250:	if (!this || !IN_BOUNDS(index, this) || !what_to_send)
       69:  251:		return -1;
      150:  252:	__set_elem(this, index, what_to_send);
      150:  253:	return 0;
        -:  254:}
        -:  255:
      604:  256:int vector_empty(const vector* this)
        -:  257:{
      604:  258:	if (this == NULL)
      180:  259:		return -1;
      424:  260:	return this->size == 0;
        -:  261:}
        -:  262:
      302:  263:uint32 vector_size(const vector* this)
        -:  264:{
      302:  265:	if (this == NULL)
       90:  266:		return -1;
      212:  267:	return this->size;
        -:  268:}
        -:  269:
      302:  270:uint32 vector_esize(const vector* this)
        -:  271:{
      302:  272:	if (this == NULL)
       90:  273:		return -1;
      212:  274:	return this->esize;
        -:  275:}
        -:  276:
      302:  277:uint32 vector_maxsize(const vector* this)
        -:  278:{
      302:  279:	if (this == NULL)
       90:  280:		return -1;
      212:  281:	return this->maxsize;
        -:  282:}
        -:  283:
      302:  284:uint32 vector_alloc(const vector* this)
        -:  285:{
      302:  286:	if (this == NULL)
       90:  287:		return -1;
      212:  288:	return this->alloc;
        -:  289:}
        -:  290:
        -:  291:/**
        -:  292: * Changes allocated memory capacity to its size
        -:  293: * @param  this current vector
        -:  294: * @return      -1 if vector is invalid or failed to reallocate memory
        -:  295: *               0 if OK
        -:  296: */
      302:  297:int vector_fit(vector* this)
        -:  298:{
      302:  299:	VECTOR_CHECK(this);
      111:  300:	    this->begin = iv_realloc(this->begin, BYTES_IN_ELEMS(this, this->size));
      111:  301:	if (this->begin == NULL){
       18:  302:		this->alloc = 0;
       18:  303:		return -1;
        -:  304:	}
       93:  305:	this->alloc = this->size;
       93:  306:	return 1;
        -:  307:}
        -:  308:
        -:  309:
     4832:  310:inline int __vector_pushback (vector* this, const void* obj)
        -:  311:{
     4832:  312:	if (this == NULL)
     1440:  313:		return -1;
     3392:  314:	return vector_insert(this, obj, this->size);
        -:  315:}
        -:  316:
     1812:  317:inline int __vector_pushfront(vector* this, const void* obj)
        -:  318:{
     1812:  319:	if (this == NULL)
      540:  320:		return -1;
     1272:  321:	return vector_insert(this, obj, 0);
        -:  322:}
        -:  323:
      604:  324:int __vector_popback  (vector* this, void* dest)
        -:  325:{
      604:  326:	if (this == NULL || dest == NULL)
      180:  327:		return -1;
        -:  328://	printf("Hello\n");
      424:  329:	int cond = vector_get(this, this->size - 1, dest);
      424:  330:	if (cond == -1)
      286:  331:		return cond;
      138:  332:	cond =  vector_remove(this, this->size - 1);
      138:  333:	return cond;
        -:  334:}
      302:  335:int __vector_popfront (vector* this, void* dest)
        -:  336:{
      302:  337:	if (this == NULL || dest == NULL)
       90:  338:		return -1;
      212:  339:	int cond = vector_get(this, 0, dest);
      212:  340:	if (cond == -1)
      125:  341:		return cond;
       87:  342:	cond =  vector_remove(this, 0);
       87:  343:	return cond;	
        -:  344:}
