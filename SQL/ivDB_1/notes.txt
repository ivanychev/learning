SELECT - Ключевое слово которое сообщает базе данных что эта
команда - запрос. Все запросы начинаются этим словом, сопровождаемым пробелом. Инструкция базе данных извлечь информацию из таблицы.

FROM - ключевое слово, подобно SELECT, которое должно быть представлено в каждом запросе. Оно сопровожда-
ется пробелом и затем именем таблицы используемой в качестве источника информации.

DISTINCT - аргумент который беспечивает Вас способом устранять двойные значения из вашего предложения SELECT. DISTINCT опускает строки где все выбранные поля идентичны. Строки в которых некоторые значения одинаковы а некоторые различны - будут сох-
ранены.

ALL - противоположность DISTINCT, где дублирование строк сохраняется.

WHERE - предложение команды SELECT, которое позволяет вам устанавливать предикаты, условие которых может быть или верным или неверным для любой строки таблицы. Команда извлекает только те строки из таблицы для которой такое утверждение верно. (AND, OR, NOT)

Оператор IN определяет набор значений в которое данное значение может или не может быть включено.
// WHERE city IN ( 'Barcelona', 'London' );

BETWEEN - В отличии от определения по номерам из набора, как это делает IN,BETWEEN определяет диапазон, значения которого должны уменьшаться что делает предикат верным. Вы должны ввести ключевое слово BETWEEN с начальным значением, ключевое AND и конечное значение. В отличие от IN, BETWEEN чувствителен к порядку, и первое значение в предложении должно быть первым по алфавитному или числовому порядку. (Включение  граничных значений)

LIKE применим только к полям типа CHAR или VARCHAR, с которыми он используется чтобы находить подстроки. Т.е. он ищет поле символа чтобы видеть, совпадает ли с условием часть его строки.

_(один символ)
%(последовательность)

SELECT * 
FROM Customers
WHERE cname LIKE 'G'; // имена начинаются с 'G'.

Символ ESC используется сразу перед процентом или подчеркиванием в предикате, и означает что процент
или подчеркивание будет интерпретироваться как символ а не как групповой символ.

SELECT *
FROM Salespeople
WHERE sname LIKE '%/_%'ESCAPE'/';

NULL -- указывает на отсутствие значения, его не известность, неопределенность. Сравнение с NULL неопределено, соответсвенные результаты будут выкинуты из выборки. SQL предоставляет специальный оператор IS, который используется с ключевым
словом NULL, для размещения значения NULL. Найдем все записи в нашей таблице Заказчиков с NULL значениями в city
столбце:

SELECT *
FROM Customers
WHERE city IS NULL;


///////////////// АГРЕГАТНЫЕ ФУНКЦИИ /////////////////

Запросы могут производить обобщённое групповое значение полей точно так же, как и значение одного поля. Это делается с помощью агрегатных функций. Агрегатные функции производят одиночное значение для всей группы таблицы.
Вот список этих функций:
COUNT - выдаёт количество строк или не-NULL значений полей, которые выбрал запрос.
COUNT ({*|[DISTINCT|ALL]expr})
SUM - выдаёт арифметическую сумму всех выбранных значений данного поля.
SUM([DISTINCT|ALL]expr)
AVG - выдаёт усреднение всех выбранных значений данного поля.
AVG([DISTINCT|ALL]expr)
MAX - выдаёт наибольшее из всех выбранных значений данного поля.
MAX([DISTINCT|ALL]expr)
MIN - выдаёт наименьшее из всех выбранных значений данного поля.
MIN([DISTINCT|ALL]expr)
Агрегатные функции могут использоваться как в сочетании с предложением GROUP BY, так и без него.
Примеры:

SELECT MAX(employees.salary)

FROM employees

WHERE employees.dep_id_ref=1
Здесь вычисляется максимальная зарплата в отделе с id=1

SELECT departments.dep_id, departments.name, AVG(salary)

FROM departments,employees

WHERE departments.dep_id=employees.dep_id_ref

GROUP BY departments.dep_id,departments.name
Здесь вычисляется средняя зарплата по каждому отделу

SELECT COUNT(distinct owner)

FROM tasks
Здесь вычисляется кол-во человек(без дублей), участвующих в таблице заданий



Функция SUBSTRING(s,n,l) выделяет из
строки s подстроку длиной l , начиная с позиции n.




ОКРУГЛЕНИЯ

ROUND ( numeric_expression , length [ ,function ] )

length - Точность, с которой должно быть округлено значение выражения numeric_expression. Когда аргумент length является положительным числом, numeric_expression округляется до числа десятичных разрядов, указанных в аргументе length. Когда length является отрицательным числом, numeric_expression округляется слева от точки, отделяющей десятичную дробь от целого числа, как указано в length.

CEILING ( numeric_expression ) - округление вверх

FLOOR ( numberic_expression) - округление вниз



DATETIME

DAY(date), MONTH(date), YEAR(date)

DATEDIFF ( datepart , startdate , enddate ) - Возвращает количество пересеченных границ (целое число со знаком), указанных аргументом datepart, за период времени, указанный аргументами startdate и enddate.

GETDATE() - возврат текущей даты

